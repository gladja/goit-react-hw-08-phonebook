{"version":3,"file":"static/js/236.9c5a72e0.chunk.js","mappings":"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","sources":["components/Loader/Loader.jsx","components/RegisterForm/RegisterForm.jsx","pages/Register.jsx"],"sourcesContent":["import { ThreeDots } from  'react-loader-spinner'\nimport { selectIsLoading } from '../../redux/auth/selectors';\nimport { useSelector } from 'react-redux';\nimport { Box } from '@mui/material';\n\nexport const Loader = () => {\n  const isLoading = useSelector(selectIsLoading);\n\n  return (\n  <>\n    {isLoading &&\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', mt: 4 }}>\n      <ThreeDots\n        height=\"80\"\n        width=\"80\"\n        radius=\"9\"\n        color=\"#3f51b5\"\n        ariaLabel=\"three-dots-loading\"\n        wrapperStyle={{}}\n        wrapperClassName=\"\"\n        visible={true}\n      />\n      </Box>\n    }\n  </>\n  )\n};\n","import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { object, string } from 'yup';\nimport { registerUser } from '../../redux/auth/operations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport React, { useEffect } from 'react';\nimport { selectLogIn } from '../../redux/auth/selectors';\nimport { toast } from 'react-toastify';\nimport { Box, Button, TextField, Typography } from '@mui/material';\n\n//*formik initialValues\nconst initialValues = {\n  name: '',\n  email: '',\n  password: '',\n};\n//*formik schema\nconst schema = object({\n  name: string().required('Required'),\n  email: string().nullable().email('Invalid email').required('Required'),\n  password: string().min(8, 'min 8').max(16).required('Required'),\n});\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const isLoggedIn = useSelector(selectLogIn);\n\n  useEffect(() => {\n    isLoggedIn && navigate('/contacts');\n  }, [isLoggedIn, navigate]);\n\n  const handleSubmit = (v, a) => {\n    console.log(a);\n    const dataUser = {\n      name: v.name,\n      email: v.email,\n      password: v.password,\n    };\n    dispatch(registerUser(dataUser)).unwrap()\n      .then(() => {\n        toast.success('Register success!');\n      }).catch((e) => {\n      console.log(e);\n      toast.error('Duplicate, Email');\n    });\n    a.resetForm();\n  };\n\n  return (\n    <>\n\n      <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>\n        <Box sx={{ width: 350, p: 4, borderRadius: 4, boxShadow: '0px 10px 20px 2px rgba(0, 0, 0, 0.2)' }}>\n\n          <Typography variant='h5' sx={{ fontWeight: 'bolder', mb: 1 }}>Register</Typography>\n\n          <Formik\n            initialValues={initialValues}\n            onSubmit={handleSubmit}\n            validationSchema={schema}\n          >\n            {({ isValid, dirty }) => (\n              <Form>\n\n                <Field\n                  type={'text'}\n                  name={'name'}\n                  as={TextField}\n                  variant='outlined'\n                  label='Name:'\n                  fullWidth\n                  size='small'\n                />\n                <ErrorMessage\n                  name='name'\n                  render={msg => (\n                    <Typography\n                      variant='caption' color={'red'}\n                      sx={{ ml: 1 }}>{msg}</Typography>\n                  )}\n                />\n                <Box sx={{ mb: 2 }} />\n                <Field\n                  type={'text'}\n                  name={'email'}\n                  as={TextField}\n                  variant='outlined'\n                  label='Email:'\n                  fullWidth\n                  size='small'\n                />\n                <ErrorMessage\n                  name='email'\n                  render={msg => (\n                    <Typography\n                      variant='caption' color={'red'}\n                      sx={{ ml: 1 }}>{msg}</Typography>\n                  )}\n                />\n                <Box sx={{ mb: 2 }} />\n                <Field\n                  type={'password'}\n                  name={'password'}\n                  as={TextField}\n                  variant='outlined'\n                  label='Password:'\n                  fullWidth\n                  size='small'\n                />\n                <ErrorMessage\n                  name='password'\n                  render={msg => (\n                    <Typography\n                      variant='caption' color={'red'}\n                      sx={{ ml: 1 }}>{msg}</Typography>\n                  )}\n                />\n\n                <Box sx={{ mb: 2 }} />\n                <Button\n                  fullWidth\n                  type={'submit'}\n                  variant='contained'\n                  size='large'\n                  aria-label=\"register user\"\n                  disabled={!isValid || !dirty}\n                >\n                  Submit\n                </Button>\n              </Form>\n            )}\n          </Formik>\n        </Box>\n      </Box>\n    </>\n  );\n};\n","import { RegisterForm } from '../components/RegisterForm/RegisterForm';\nimport { Loader } from '../components/Loader/Loader';\nimport { useSelector } from 'react-redux';\nimport { selectIsLoading } from '../redux/auth/selectors';\n\nconst Register = () => {\n  const isLoading = useSelector(selectIsLoading);\n\n  return (\n    <>\n      { isLoading ? <Loader/> : <RegisterForm /> }\n    </>\n  );\n};\n\nexport default Register\n"],"names":["Loader","isLoading","useSelector","selectIsLoading","sx","display","justifyContent","alignItems","mt","height","width","radius","color","ariaLabel","wrapperStyle","wrapperClassName","visible","initialValues","name","email","password","schema","object","string","required","nullable","min","max","RegisterForm","dispatch","useDispatch","navigate","useNavigate","isLoggedIn","selectLogIn","useEffect","Box","p","borderRadius","boxShadow","Typography","variant","fontWeight","mb","onSubmit","v","a","console","log","dataUser","registerUser","unwrap","then","toast","catch","e","resetForm","validationSchema","isValid","dirty","type","as","TextField","label","fullWidth","size","render","msg","ml","Button","disabled"],"sourceRoot":""}